from st_pages import Page, show_pages, add_page_title
import streamlit as st
import os
from utils.database.database_manager import get_database
import importlib
import st_pages
import redis
import json
from datetime import timedelta
import time
from utils.redis_client import get_redis_client

# –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
PAGE_CONFIG = {
    "registr": {
        "name": "–í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
        "icon": "üîê",
        "order": 1,
        "show_when_authenticated": False,
        "show_in_menu": True
    },
    "key_input": {
        "name": "–í–≤–æ–¥/–ü–æ–∫—É–ø–∫–∞ –∫–ª—é—á–∞",
        "icon": "üîë",
        "order": 2,
        "show_when_authenticated": True,
        "show_in_menu": True
    },
    "simple_chat": {
        "name": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–∞—Ç",
        "icon": "üí¨",
        "order": 3,
        "show_when_authenticated": True,
        "show_in_menu": True
    },
    "app": {
        "name": "–ü–æ–∏—Å–∫–æ–≤—ã–π –æ—Ç–¥–µ–ª",
        "icon": "üîç",
        "order": 4,
        "show_when_authenticated": True,
        "show_in_menu": True,
        "requires_token": True
    },
    "new_chat": {
        "name": "–õ–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫",
        "icon": "üí≠",
        "order": 5,
        "show_when_authenticated": True,
        "show_in_menu": True,
        "requires_token": True
    },
    "profile": {
        "name": "–ü—Ä–æ—Ñ–∏–ª—å",
        "icon": "üë§",
        "order": 6,
        "show_when_authenticated": True,
        "show_in_menu": True
    },
    "admin/generate_tokens": {
        "name": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π",
        "icon": "üîë",
        "order": 7,
        "show_when_authenticated": True,
        "show_in_menu": True,
        "admin_only": True
    },
    "admin/analytics": {
        "name": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
        "icon": "üìä",
        "order": 8,
        "show_when_authenticated": True,
        "show_in_menu": True,
        "admin_only": True
    }
}

@st.cache_resource(show_spinner=False)
def get_pages_store():
    """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü"""
    return {}

def setup_pages():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ Redis
    redis_client = get_redis_client()
    session_id = st.session_state.get("_session_id")
    username = st.session_state.get("username", "anonymous")
    
    if redis_client and session_id and username != "anonymous":
        session_key = f"session:{username}:{session_id}"
        session_data = redis_client.get(session_key)
        
        if not session_data:
            # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Redis, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            st.session_state.authenticated = False
            st.session_state.username = None
            st.session_state.is_admin = False
            st.session_state._session_id = None
            show_pages([Page("pages/registr.py", name=PAGE_CONFIG["registr"]["name"], icon=PAGE_CONFIG["registr"]["icon"])])
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ Redis
        try:
            session_data = json.loads(session_data)
            st.session_state.authenticated = session_data.get("authenticated", False)
            st.session_state.is_admin = session_data.get("is_admin", False)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏: {e}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
    pages_to_show = []
    is_authenticated = st.session_state.get("authenticated", False)
    is_admin = st.session_state.get("is_admin", False)
    
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not is_authenticated:
        reg_page_path = "pages/registr.py"
        if os.path.exists(reg_page_path):
            pages_to_show.append(
                Page(reg_page_path, name=PAGE_CONFIG["registr"]["name"], icon=PAGE_CONFIG["registr"]["icon"])
            )
        else:
            print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª {reg_page_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for page_id, config in sorted(PAGE_CONFIG.items(), key=lambda x: x[1]["order"]):
        if page_id == "registr":
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        should_show = (
            is_authenticated and 
            config["show_when_authenticated"] and
            (not config.get("admin_only", False) or is_admin)
        )
        
        if should_show and config.get("show_in_menu", True):
            page_path = f"pages/{page_id}.py"
            if os.path.exists(page_path):
                pages_to_show.append(
                    Page(page_path, name=config["name"], icon=config["icon"])
                )
            else:
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –§–∞–π–ª {page_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if not pages_to_show:
        print("–û—à–∏–±–∫–∞: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
        
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    try:
        show_pages(pages_to_show)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü: {e}")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if not is_authenticated:
            show_pages([Page("pages/registr.py", name=PAGE_CONFIG["registr"]["name"], icon=PAGE_CONFIG["registr"]["icon"])])

def check_token_access():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É, —Ç—Ä–µ–±—É—é—â–µ–º—É —Ç–æ–∫–µ–Ω"""
    if not st.session_state.get("authenticated", False):
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
        st.switch_page("pages/registr.py")
        st.stop()
        
    db = get_database()
    user = db.get_user(st.session_state.get("username"))
    if not user or not user.get("active_token"):
        st.warning("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á")
        st.switch_page("pages/key_input.py")
        st.stop()