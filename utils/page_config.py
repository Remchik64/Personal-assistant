from st_pages import Page, show_pages, add_page_title
import streamlit as st
import os
from utils.database.database_manager import get_database
import importlib
import st_pages

# –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
PAGE_CONFIG = {
    "registr": {
        "name": "–í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
        "icon": "üîê",
        "order": 1,
        "show_when_authenticated": False,
        "show_in_menu": True
    },
    "key_input": {
        "name": "–í–≤–æ–¥/–ü–æ–∫—É–ø–∫–∞ –∫–ª—é—á–∞",
        "icon": "üîë",
        "order": 2,
        "show_when_authenticated": True,
        "show_in_menu": True
    },
    "simple_chat": {
        "name": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–∞—Ç",
        "icon": "üí¨",
        "order": 3,
        "show_when_authenticated": True,
        "show_in_menu": True
    },
    "app": {
        "name": "–ü–æ–∏—Å–∫–æ–≤—ã–π –æ—Ç–¥–µ–ª",
        "icon": "üîç",
        "order": 4,
        "show_when_authenticated": True,
        "show_in_menu": True,
        "requires_token": True
    },
    "new_chat": {
        "name": "–õ–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫",
        "icon": "üí≠",
        "order": 5,
        "show_when_authenticated": True,
        "show_in_menu": True,
        "requires_token": True
    },
    "profile": {
        "name": "–ü—Ä–æ—Ñ–∏–ª—å",
        "icon": "üë§",
        "order": 6,
        "show_when_authenticated": True,
        "show_in_menu": True
    },
    "admin/generate_tokens": {
        "name": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π",
        "icon": "üîë",
        "order": 7,
        "show_when_authenticated": True,
        "show_in_menu": True,
        "admin_only": True
    },
    "admin/analytics": {
        "name": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
        "icon": "üìä",
        "order": 9,
        "show_when_authenticated": True,
        "show_in_menu": True,
        "admin_only": True
    }
}

def setup_pages():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    importlib.reload(st_pages)
    pages_to_show = []
    is_authenticated = st.session_state.get("authenticated", False)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_admin = False
    if is_authenticated and "username" in st.session_state:
        try:
            is_admin = st.session_state.username == st.secrets["admin"]["admin_username"]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            is_admin = False
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    if not is_authenticated:
        pages_to_show.append(
            Page("pages/registr.py", name=PAGE_CONFIG["registr"]["name"], icon=PAGE_CONFIG["registr"]["icon"])
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for page_id, config in sorted(PAGE_CONFIG.items(), key=lambda x: x[1]["order"]):
        if page_id == "registr":
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        should_show = (
            is_authenticated and 
            config["show_when_authenticated"] and
            (not config.get("admin_only", False) or is_admin)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-—Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        )
        
        if should_show and config.get("show_in_menu", True):
            page_path = f"pages/{page_id}.py"
            if os.path.exists(page_path):
                pages_to_show.append(
                    Page(page_path, name=config["name"], icon=config["icon"])
                )
    
    # –ù–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–∞–Ω—Å–∞
    session_id = str(id(st.session_state))
    if not hasattr(st_pages, '_SESSION_PAGES'):
        st_pages._SESSION_PAGES = {}
    st_pages._SESSION_PAGES[session_id] = pages_to_show.copy()
    
    # –ü–∞—Ç—á–∏–º —Ñ—É–Ω–∫—Ü–∏—é show_pages, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–¥–µ–ª–∞–Ω–æ
    if not hasattr(st_pages, 'original_show_pages'):
        st_pages.original_show_pages = st_pages.show_pages
        def session_show_pages(pages=None, *args, **kwargs):
            sid = str(id(st.session_state))
            pages_to_use = st_pages._SESSION_PAGES.get(sid, [])
            st_pages.original_show_pages(pages_to_use)
        st_pages.show_pages = session_show_pages
    
    # –í—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é show_pages –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∞–Ω—Å–∞
    st_pages.show_pages(pages_to_show)

def check_token_access():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É, —Ç—Ä–µ–±—É—é—â–µ–º—É —Ç–æ–∫–µ–Ω"""
    if not st.session_state.get("authenticated", False):
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
        st.switch_page("pages/registr.py")
        st.stop()
        
    db = get_database()
    user = db.get_user(st.session_state.get("username"))
    if not user or not user.get("active_token"):
        st.warning("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á")
        st.switch_page("pages/key_input.py")
        st.stop()