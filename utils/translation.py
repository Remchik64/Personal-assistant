from googletrans import Translator
import streamlit as st

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
translator = Translator()

def translate_text(text, target_lang='ru'):
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫, —Ä–∞–∑–±–∏–≤–∞—è –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
    target_lang: 'ru' –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ –∏–ª–∏ 'en' –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
    """
    try:
        print(f"–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞. –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫: {target_lang}")
        print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): {text[:100]}...")
        
        if text is None or not isinstance(text, str) or text.strip() == '':
            print("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
            return "–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        translator = Translator()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞
        try:
            detected = translator.detect(text)
            detected_lang = detected.lang
            confidence = detected.confidence
            print(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫: {detected_lang} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence})")
            
            # –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞ –Ω–∏–∑–∫–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥
            if confidence < 0.8:
                print("–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞, –ø—Ä–æ–±—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥...")
                from langdetect import detect
                detected_lang = detect(text)
                print(f"–Ø–∑—ã–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∑–∞–ø–∞—Å–Ω—ã–º –º–µ—Ç–æ–¥–æ–º: {detected_lang}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞: {str(e)}")
            return text
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∂–µ –Ω–∞ —Ü–µ–ª–µ–≤–æ–º —è–∑—ã–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if detected_lang == target_lang:
            print(f"–¢–µ–∫—Å—Ç —É–∂–µ –Ω–∞ —Ü–µ–ª–µ–≤–æ–º —è–∑—ã–∫–µ ({target_lang})")
            return text
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤
        print("–†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏...")
        parts = []
        current_part = ""
        sentences = text.replace('\n', '. ').split('. ')
        
        for sentence in sentences:
            if len(current_part) + len(sentence) < 1000:
                current_part += sentence + '. '
            else:
                if current_part:
                    parts.append(current_part.strip())
                current_part = sentence + '. '
        if current_part:
            parts.append(current_part.strip())
        
        print(f"–¢–µ–∫—Å—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π")
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
        translated_parts = []
        for i, part in enumerate(parts, 1):
            try:
                print(f"–ü–µ—Ä–µ–≤–æ–¥ —á–∞—Å—Ç–∏ {i}/{len(parts)}...")
                translation = translator.translate(part, dest=target_lang)
                if translation and hasattr(translation, 'text'):
                    translated_parts.append(translation.text)
                    print(f"–ß–∞—Å—Ç—å {i} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞")
                else:
                    print(f"–û—à–∏–±–∫–∞: —á–∞—Å—Ç—å {i} –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏")
                    translated_parts.append(part)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —á–∞—Å—Ç–∏ {i}: {str(e)}")
                translated_parts.append(part)
                continue
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏
        result = ' '.join(translated_parts)
        print("–ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return result
            
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}")
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}")
        return text

def display_message_with_translation(message, message_hash, avatar, role, button_key=None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥–∞"""
    # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if 'message_display_counter' not in st.session_state:
        st.session_state.message_display_counter = 0
    st.session_state.message_display_counter += 1
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–Ω–æ–ø–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Å—á–µ—Ç—á–∏–∫
    if button_key is None:
        button_key = f"translate_{message_hash}_{role}_{st.session_state.message_display_counter}"
    
    translation_key = f"translation_{message_hash}"
    content = message.get("content", "")
    
    with st.chat_message(role, avatar=avatar):
        cols = st.columns([0.9, 0.05, 0.05])
        
        with cols[0]:
            message_placeholder = st.empty()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
            if translation_key not in st.session_state:
                st.session_state[translation_key] = {
                    "is_translated": False,
                    "translated_text": None,
                    "original_text": content
                }
            elif "original_text" not in st.session_state[translation_key]:
                st.session_state[translation_key].update({
                    "original_text": content
                })
            
            current_state = st.session_state[translation_key]
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—Å—Ç
            if current_state["is_translated"]:
                if current_state["translated_text"] is None:
                    current_state["translated_text"] = translate_text(content)
                message_placeholder.markdown(current_state["translated_text"])
            else:
                message_placeholder.markdown(content)
        
        with cols[1]:
            # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
            try:
                detected_lang = translator.detect(content).lang
                tooltip = "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π" if detected_lang == 'ru' else "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"
            except:
                tooltip = "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏"
                
            translate_button_key = f"{button_key}_translate_{st.session_state.message_display_counter}"
            if st.button("üîÑ", key=translate_button_key, help=tooltip):
                current_state = st.session_state[translation_key]
                current_state["is_translated"] = not current_state["is_translated"]
                
                if current_state["is_translated"] and current_state["translated_text"] is None:
                    current_state["translated_text"] = translate_text(content)
                
                message_placeholder.markdown(
                    current_state["translated_text"] if current_state["is_translated"] 
                    else content
                )
        
        with cols[2]:
            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
            delete_button_key = f"delete_{message_hash}_{st.session_state.message_display_counter}"
            if st.button("üóë", key=delete_button_key, help="–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"):
                return True
    
    return False 