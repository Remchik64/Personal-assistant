import streamlit as st
from streamlit_extras.switch_page_button import switch_page
from utils.page_config import PAGE_CONFIG, setup_pages
from utils.database.database_manager import get_database
import os
import json
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = get_database()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
if st.session_state.get("sidebar_state") == "expanded":
    st.set_page_config(
        page_title="–í–≤–æ–¥/–ü–æ–∫—É–ø–∫–∞ –∫–ª—é—á–∞",
        page_icon="üîë",
        layout="wide",
        initial_sidebar_state="expanded"
    )
else:
    st.set_page_config(
        page_title="–í–≤–æ–¥/–ü–æ–∫—É–ø–∫–∞ –∫–ª—é—á–∞",
        page_icon="üîë",
        layout="wide",
        initial_sidebar_state="collapsed"
    )

# –ó–∞—Ç–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
setup_pages()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
if "authenticated" not in st.session_state or not st.session_state.authenticated:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
    switch_page(PAGE_CONFIG["registr"]["name"])
    st.stop()

st.title("–í–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞")

# –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞
access_token = st.text_input("–í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: b99176c5-8bca-4be9-b066-894e4103f32c)")

def verify_token(token: str, username: str) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.get_user(username)
    if not user:
        return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    token_data = db.access_tokens.find_one({"token": token})
    if not token_data:
        return False, "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω"
    
    if token_data.get("used", False):
        return False, "–¢–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    existing_user = db.users.find_one({"active_token": token})
    if existing_user and existing_user['username'] != username:
        return False, "–¢–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞
        db.access_tokens.update_one(
            {"token": token},
            {
                "$set": {
                    "used": True,
                    "activated_at": datetime.now(),
                    "activated_by": username
                }
            }
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.users.update_one(
            {"username": username},
            {
                "$set": {
                    "active_token": token,
                    "remaining_generations": token_data["generations"],
                    "token_activated_at": datetime.now()
                }
            }
        )
        
        return True, "–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if st.button("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω"):
    success, message = verify_token(access_token, st.session_state.username)
    if success:
        st.success(message)
        st.session_state.access_granted = True
        switch_page(PAGE_CONFIG["app"]["name"])
    else:
        st.error(message)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–∞
if st.button("–ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω", key="buy_link"):
    st.markdown('<a href="https://startintellect.ru/products" target="_blank">–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç</a>', unsafe_allow_html=True)
