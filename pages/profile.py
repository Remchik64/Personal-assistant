import streamlit as st
from streamlit_extras.switch_page_button import switch_page
import os
from PIL import Image
from utils.page_config import setup_pages, PAGE_CONFIG
import hashlib
import io
import mimetypes
from utils.security import hash_password, is_strong_password
import requests
from googletrans import Translator
import streamlit.components.v1 as components
from datetime import datetime
from utils.database.database_manager import get_database

# –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = get_database()

# –ü–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
PROFILE_IMAGES_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'profile_images'))
if not os.path.exists(PROFILE_IMAGES_DIR):
    os.makedirs(PROFILE_IMAGES_DIR)

def clear_chat_history(username: str, flow_id: str, session_id: str):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    db.chat_history.update_one(
        {
            "username": username,
            "flow_id": flow_id,
            "session_id": session_id
        },
        {
            "$set": {
                "messages": [],
                "updated_at": datetime.now()
            }
        }
    )

def is_valid_image(file_content):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    try:
        Image.open(io.BytesIO(file_content))
        return True
    except Exception:
        return False

# –ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ!)
st.set_page_config(
    page_title="–ü—Ä–æ—Ñ–∏–ª—å",
    page_icon="üë§",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
setup_pages()

# HTML –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞
chat_bot_html = """
<div style="height: 600px; width: 100%;">
<script type="module">
    import Chatbot from "https://cdn.jsdelivr.net/npm/flowise-embed/dist/web.js"
    Chatbot.init({
        chatflowid: "28d13206-3a4d-4ef8-80e6-50b671b5766c",
        apiHost: "https://flowise-renataraev64.amvera.io",
        chatflowConfig: {
            // topK: 2
        },
        theme: {
            button: {
                backgroundColor: "#000000",
                right: 20,
                bottom: 20,
                size: 48,
                dragAndDrop: true,
                iconColor: "white",
                customIconSrc: "https://raw.githubusercontent.com/walkxcode/dashboard-icons/main/svg/google-messages.svg",
                autoWindowOpen: {
                    autoOpen: true,
                    openDelay: 0,
                    autoOpenOnMobile: true,
                },
            },
            tooltip: {
                showTooltip: true,
                tooltipMessage: '–ü—Ä–∏–≤–µ—Ç!',
                tooltipBackgroundColor: 'black',
                tooltipTextColor: 'white',
                tooltipFontSize: 16,
            },
            chatWindow: {
                showTitle: true,
                title: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                titleAvatarSrc: '',
                showAgentMessages: true,
                welcomeMessage: '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏.',
                errorMessage: 'This is a custom error message',
                backgroundColor: "#ffffff",
                height: 700,
                width: 400,
                fontSize: 16,
                starterPromptFontSize: 15,
                clearChatOnReload: false,
                botMessage: {
                    backgroundColor: "#f7f8ff",
                    textColor: "#303235",
                    showAvatar: false,
                    showBotName: true,
                    botName: "Bot",
                    botNameColor: "#303235"
                },
                userMessage: {
                    backgroundColor: "#000000",
                    textColor: "#ffffff",
                    showAvatar: false,
                    showUserName: true,
                    userName: "User",
                    userNameColor: "#ffffff"
                },
                textInput: {
                    placeholder: ' –í–∞—à –≤–æ–ø—Ä–æ—Å',
                    backgroundColor: '#ffffff',
                    textColor: '#303235',
                    sendButtonColor: '#000000',
                    autoFocus: true,
                    sendMessageSound: true,
                    receiveMessageSound: true,
                },
                feedback: {
                    color: '#303235',
                },
                footer: {
                    textColor: '#303235',
                    text: '',
                    company: '',
                    companyLink: '',
                }
            }
        }
    })
</script>
</div>
"""

def main():
    # –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
    with st.sidebar:
        st.title("–ú–µ–Ω—é")
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        if st.button("üö™ –í—ã–π—Ç–∏", use_container_width=True):
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            for key in st.session_state.keys():
                del st.session_state[key]
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            st.rerun()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        st.markdown("---")
        
        # –ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
        st.subheader("üí¨ –ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
        components.html(chat_bot_html, height=700)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = db.get_user(st.session_state.username)
    if not user_data:
        st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    st.title(f"–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç {st.session_state.username}")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    st.header("–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    st.write(f"Email: {user_data['email']}")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    if user_data.get('active_token'):
        st.subheader("–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        remaining_generations = user_data.get('remaining_generations', 0)
        
        if remaining_generations > 0:
            st.success(f"–û—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {remaining_generations}")
        else:
            st.warning("–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω.")
    else:
        st.warning("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞. –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω.")
        if st.button("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω"):
            switch_page(PAGE_CONFIG["key_input"]["name"])

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
    st.subheader("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
    if user_data.get('profile_image') and os.path.exists(user_data['profile_image']):
        st.image(user_data['profile_image'], width=150)
        if st.button("–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è"):
            old_image_path = user_data.get('profile_image')
            if old_image_path and old_image_path != os.path.join(PROFILE_IMAGES_DIR, "default_user_icon.png"):
                if os.path.exists(old_image_path):
                    try:
                        os.remove(old_image_path)
                        st.success("–°—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.update_user(st.session_state.username, {
                'profile_image': None,
                'updated_at': datetime.now()
            })
            st.success("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ—Ñ–∏–ª—è —É–¥–∞–ª–µ–Ω–∞")
            st.rerun()
    else:
        st.write("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

    # –ó–æ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    st.header("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
    new_username = st.text_input("–ù–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", value=user_data['username'])
    new_email = st.text_input("–ù–æ–≤—ã–π email", value=user_data['email'])
    new_password = st.text_input("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", type="password")
    confirm_password = st.text_input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", type="password")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
    new_profile_image = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è", type=["png", "jpg", "jpeg"])
    if new_profile_image is not None:
        st.image(new_profile_image, width=150)
        updates = {}
        needs_reload = False

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            MAX_FILE_SIZE = 2 * 1024 * 1024  # 2MB
            if new_profile_image.size > MAX_FILE_SIZE:
                st.error("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 2MB.")
                st.stop()

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            file_extension = os.path.splitext(new_profile_image.name)[1].lower()
            image_filename = f"{user_data['username']}{file_extension}"
            image_path = os.path.join(PROFILE_IMAGES_DIR, image_filename)

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            old_image_path = user_data.get('profile_image')
            if old_image_path and old_image_path != os.path.join(PROFILE_IMAGES_DIR, "default_user_icon.png"):
                if os.path.exists(old_image_path):
                    try:
                        os.remove(old_image_path)
                    except Exception as e:
                        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with open(image_path, "wb") as f:
                f.write(new_profile_image.getbuffer())

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img = Image.open(new_profile_image)
            img.verify()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.update_user(st.session_state.username, {
                'profile_image': image_path,
                'updated_at': datetime.now()
            })
            needs_reload = True

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            if 'image_path' in locals() and os.path.exists(image_path):
                os.remove(image_path)
            st.stop()

    if st.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
        updates = {}
        needs_reload = False
        old_username = user_data['username']

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ email
        if new_username and new_username != old_username:
            existing_user = db.users.find_one({"username": new_username})
            if existing_user:
                st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                updates['username'] = new_username
                needs_reload = True

        if new_email and new_email != user_data['email']:
            updates['email'] = new_email
            needs_reload = True

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
        if new_password:
            if new_password != confirm_password:
                st.error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            else:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
                is_strong, message = is_strong_password(new_password)
                if not is_strong:
                    st.error(message)
                else:
                    updates['password'] = hash_password(new_password)
                    needs_reload = True

        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø—Ä–∏–º–µ–Ω—è–µ–º –∏—Ö
        if updates:
            updates['updated_at'] = datetime.now()
            db.update_user(old_username, updates)
            st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            if needs_reload:
                st.rerun()

if __name__ == "__main__":
    if "authenticated" not in st.session_state or not st.session_state.authenticated:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
        switch_page(PAGE_CONFIG["registr"]["name"])
    else:
        main()

