import streamlit as st
import requests
import json
import os
from PIL import Image
import hashlib
from utils.utils import verify_user_access, update_remaining_generations, get_data_file_path
from googletrans import Translator
from datetime import datetime
from utils.page_config import setup_pages
import time
from utils.translation import translate_text, display_message_with_translation
from flowise import Flowise, PredictionData
import uuid
from langdetect import detect
from pymongo import MongoClient
from redis import Redis, ConnectionPool
import redis.exceptions
import socket

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–õ–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
setup_pages()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
if "authenticated" not in st.session_state or not st.session_state.authenticated:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
    st.stop()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Flowise
if "flowise" not in st.secrets or "base_url" not in st.secrets["flowise"]:
    st.error("–û—à–∏–±–∫–∞: URL Flowise API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ secrets.toml")
    st.stop()

# –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –∏ –æ—á–∏—â–∞–µ–º –µ–≥–æ –æ—Ç /api/v1/prediction
base_url = st.secrets["flowise"]["base_url"].replace('/api/v1/prediction', '')

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Flowise
flowise_client = Flowise(base_url=base_url)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if "session_id" not in st.session_state:
    st.session_state.session_id = str(uuid.uuid4())
    st.session_state.messages = []
else:
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if "messages" not in st.session_state:
        st.session_state.messages = []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–π —Å–µ—Å—Å–∏–π
HISTORY_DIR = os.path.join(os.path.dirname(__file__), '..', 'chat_history')
if not os.path.exists(HISTORY_DIR):
    os.makedirs(HISTORY_DIR)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MongoDB —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
mongo_uri = (
    f"mongodb://{st.secrets['mongodb']['username']}:{st.secrets['mongodb']['password']}"
    f"@fra1.clusters.zeabur.com:31735/{st.secrets['mongodb']['database']}"
    "?authSource=admin&authMechanism=SCRAM-SHA-1"
)
mongo_client = MongoClient(mongo_uri)
user_db = mongo_client[st.secrets["mongodb"]["database"]]["users"]

# –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Å –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
redis_pool = ConnectionPool(
    host=st.secrets["redis"]["host"],
    port=st.secrets["redis"]["port"],
    password=st.secrets["redis"]["password"],
    db=0,
    socket_timeout=10,
    socket_connect_timeout=10,
    socket_keepalive=True,
    socket_keepalive_options={
        socket.TCP_KEEPIDLE: 30,
        socket.TCP_KEEPINTVL: 10,
        socket.TCP_KEEPCNT: 3
    },
    retry_on_timeout=True,
    max_connections=20,
    health_check_interval=15
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Redis —Å –ø—É–ª–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
redis_client = Redis(connection_pool=redis_pool, decode_responses=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Redis –æ–ø–µ—Ä–∞—Ü–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
def safe_redis_operation(operation, *args, **kwargs):
    global redis_client  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ global –≤ –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
    max_retries = 5
    base_delay = 1
    
    for attempt in range(max_retries):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏–µ–π
            if not redis_client.ping():
                raise redis.exceptions.ConnectionError("Failed ping check")
                
            result = operation(*args, **kwargs)
            return result
            
        except (redis.exceptions.ConnectionError, 
                redis.exceptions.TimeoutError, 
                ConnectionResetError) as e:
            
            delay = base_delay * (2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}. –û—à–∏–±–∫–∞: {str(e)}")
            
            if attempt == max_retries - 1:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                try:
                    redis_client.connection_pool.reset()
                    new_client = Redis(connection_pool=redis_pool, decode_responses=True)
                    if new_client.ping():
                        redis_client = new_client  # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑ global
                        return operation(*args, **kwargs)
                except Exception as reset_error:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {reset_error}")
                raise
                
            time.sleep(delay)
        except Exception as e:
            print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            raise

def get_session_display_name(username: str, flow_id: str, session_id: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Å–µ—Å—Å–∏–∏"""
    history_file = os.path.join(HISTORY_DIR, f"{username}_{flow_id}_{session_id}.json")
    try:
        with open(history_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
            if isinstance(data, dict) and 'display_name' in data:
                return data['display_name']
    except:
        pass
    return f"–°–µ—Å—Å–∏—è {session_id}"

def save_session_history(username, flow_id, session_id, messages, display_name=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏ –≤ —Ñ–∞–π–ª"""
    key = f"{username}_{flow_id}_{session_id}"
    data = {
        'messages': messages,
        'display_name': display_name or f"–°–µ—Å—Å–∏—è {len(get_available_sessions(username, flow_id)) + 1}"
    }
    safe_redis_operation(redis_client.set, key, json.dumps(data))

def load_session_history(username, flow_id, session_id):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    key = f"{username}_{flow_id}_{session_id}"
    data = safe_redis_operation(redis_client.get, key)
    if data:
        return json.loads(data).get('messages', [])
    return []

def get_available_sessions(username, flow_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è —á–∞—Ç–∞"""
    prefix = f"{username}_{flow_id}_"
    cache_key = f"available_sessions_{prefix}"
    
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
    try:
        cached_data = redis_client.get(cache_key)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∞: {e}")
        cached_data = None
        
    if cached_data:
        return json.loads(cached_data)
    
    sessions = []
    try:
        for key in safe_redis_operation(redis_client.scan_iter, f"{prefix}*"):
            session_id = key.decode().split('_')[-1]
            try:
                data = redis_client.get(key)
                if data:
                    data = json.loads(data)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏: {e}")
                continue
            sessions.append({
                'id': session_id,
                'display_name': data.get('display_name', f"–°–µ—Å—Å–∏—è {len(sessions) + 1}"),
                'created_at': data.get('created_at', datetime.now().isoformat())
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        sessions = sorted(sessions, key=lambda x: x.get('created_at', ''))
        
        # –ü–æ–º–µ—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å–µ—Å—Å–∏—é –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é
        if sessions:
            sessions[0]['display_name'] = "–û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Å—Å–∏—è"
            sessions[0]['is_primary'] = True
            for session in sessions[1:]:
                session['is_primary'] = False
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        try:
            redis_client.set(
                cache_key,
                json.dumps(sessions),
                ex=60  # –ö—ç—à –Ω–∞ 1 –º–∏–Ω—É—Ç—É
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–π: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π: {e}")
        return []
    return sessions

def rename_session(username: str, flow_id: str, session_id: str, new_name: str):
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é"""
    try:
        key = f"{username}_{flow_id}_{session_id}"
        cache_key = f"available_sessions_{username}_{flow_id}_"
        
        data = safe_redis_operation(redis_client.get, key)
        if data:
            data = json.loads(data)
            messages = data.get('messages', [])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
            session_data = {
                'messages': messages,
                'display_name': new_name,
                'updated_at': datetime.now().isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            safe_redis_operation(
                redis_client.set,
                key,
                json.dumps(session_data),
                ex=86400  # TTL 24 —á–∞—Å–∞
            )
            
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π
            safe_redis_operation(redis_client.delete, cache_key)
            
            st.success(f"–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '{new_name}'")
            time.sleep(1)
            st.rerun()
            return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        return False

def delete_session(username: str, flow_id: str, session_id: str):
    """–£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª–Ω–æ—Å—Ç—å—é"""
    try:
        key = f"{username}_{flow_id}_{session_id}"
        cache_key = f"available_sessions_{username}_{flow_id}_"
        
        if safe_redis_operation(redis_client.exists, key):
            # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ Redis
            safe_redis_operation(redis_client.delete, key)
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π
            safe_redis_operation(redis_client.delete, cache_key)
            print(f"–£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è: {key}")
            
            # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
            if ('current_chat_flow' in st.session_state and 
                'current_session' in st.session_state.current_chat_flow and 
                st.session_state.current_chat_flow['current_session'] == session_id):
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–µ—Å—Å–∏–π
                available_sessions = get_available_sessions(username, flow_id)
                
                if available_sessions:
                    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å–µ—Å—Å–∏—é
                    st.session_state.current_chat_flow['current_session'] = available_sessions[0]['id']
                else:
                    # –ï—Å–ª–∏ —Å–µ—Å—Å–∏–π –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                    new_session_id = str(uuid.uuid4())
                    st.session_state.current_chat_flow['current_session'] = new_session_id
                    save_session_history(username, flow_id, new_session_id, [], f"–°–µ—Å—Å–∏—è {datetime.now().strftime('%Y-%m-%d %H:%M')}")
            
            st.success("–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
            time.sleep(1)
            st.rerun()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é")

def clear_session_history(username: str, flow_id: str, session_id: str):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
    try:
        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏
        save_session_history(username, flow_id, session_id, [], get_session_display_name(username, flow_id, session_id))
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        st.session_state.messages = []
        
        print(f"–û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–∏: {username}_{flow_id}_{session_id}")
        st.rerun()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

def delete_message_from_session(username: str, flow_id: str, session_id: str, message_hash: str):
    """–£–¥–∞–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–∏"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = load_session_history(username, flow_id, session_id)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ö—ç—à–µ–º
        updated_messages = [
            msg for msg in messages 
            if get_message_hash(msg["role"], msg["content"]) != message_hash
        ]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        save_session_history(username, flow_id, session_id, updated_messages, get_session_display_name(username, flow_id, session_id))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        st.session_state.messages = updated_messages
        
        print(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–µ—Å—Å–∏–∏: {username}_{flow_id}_{session_id}")
        st.rerun()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–µ–π –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
PROFILE_IMAGES_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'profile_images'))
ASSISTANT_ICON_PATH = os.path.join(PROFILE_IMAGES_DIR, 'assistant_icon.png')

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
if os.path.exists(ASSISTANT_ICON_PATH):
    try:
        assistant_avatar = Image.open(ASSISTANT_ICON_PATH)
    except Exception as e:
        assistant_avatar = "ü§ñ"
else:
    assistant_avatar = "ü§ñ"

def get_message_hash(role, content):
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö—ç—à –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return hashlib.md5(f"{role}:{content}".encode()).hexdigest()

def get_user_profile_image(username):
    for ext in ['png', 'jpg', 'jpeg']:
        image_path = os.path.join(PROFILE_IMAGES_DIR, f"{username}.{ext}")
        if os.path.exists(image_path):
            try:
                return Image.open(image_path)
            except Exception as e:
                return "üë§"
    return "üë§"

def display_message(message, role):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    avatar = assistant_avatar if role == "assistant" else get_user_profile_image(st.session_state.username)
    
    with st.chat_message(role, avatar=avatar):
        st.markdown(message["content"])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç-–ø–æ—Ç–æ–∫–∞
def save_chat_flow(username, flow_id, flow_name=None):
    flow_name = flow_name or f"–ß–∞—Ç {len(get_user_chat_flows(username)) + 1}"
    user_db.update_one(
        {"username": username},
        {"$push": {"chat_flows": {
            'id': flow_id,
            'name': flow_name,
            'created_at': datetime.now().isoformat(),
            'current_session': 'session_1'
        }}},
        upsert=True
    )
    return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç-–ø–æ—Ç–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_chat_flows(username):
    user = user_db.find_one({"username": username})
    if user and "chat_flows" in user:
        return user["chat_flows"]
    return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
def clear_chat_history(username, flow_id):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    keys_to_delete = []
    for key in st.session_state.keys():
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if any(key.startswith(prefix) for prefix in [
            "message_hashes",
            "message_counter",
            "message_ids",
            "translation_state_",
            "translation_states",
            "_last_input"
        ]):
            keys_to_delete.append(key)
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
    for key in keys_to_delete:
        del st.session_state[key]
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    st.session_state.message_counter = 0
    
    st.rerun()

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ clear_chat_history

def delete_chat_flow(username, flow_id):
    result = user_db.update_one(
        {"username": username},
        {"$pull": {"chat_flows": {"id": flow_id}}}
    )
    return result.modified_count > 0

st.title("–õ–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
user = user_db.find_one({"username": st.session_state.username})
if user:
    remaining_generations = user.get('remaining_generations', 0)
    st.sidebar.metric("–û—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:", remaining_generations)
    
    if remaining_generations <= 0:
        st.error("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω, –∫—É–ø–∏—Ç—å –Ω–æ–≤—ã–π –º–æ–∂–Ω–æ –≤ https://startintellect.ru/products")
        st.stop()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç-–ø–æ—Ç–æ–∫–∞–º–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
st.sidebar.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç-–ø–æ—Ç–æ–∫–∞–º–∏")

# –í—ã–±–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç-–ø–æ—Ç–æ–∫–∞
chat_flows = get_user_chat_flows(st.session_state.username)
if chat_flows:
    flow_names = [flow['name'] for flow in chat_flows]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    current_index = 0
    if 'current_chat_flow' in st.session_state:
        try:
            current_flow_name = st.session_state.current_chat_flow['name']
            if current_flow_name in flow_names:
                current_index = flow_names.index(current_flow_name)
        except:
            current_index = 0
    
    selected_flow_name = st.sidebar.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:",
        flow_names,
        index=current_index
    )
    
    selected_flow = next(
        (flow for flow in chat_flows if flow['name'] == selected_flow_name),
        chat_flows[0]
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç
    if ('current_chat_flow' not in st.session_state or 
        st.session_state.current_chat_flow['id'] != selected_flow['id']):
        # –û–±–Ω–æ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
        st.session_state.current_chat_flow = selected_flow
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —á–∞—Ç–∞
        if "message_hashes" in st.session_state:
            del st.session_state.message_hashes
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏
        st.rerun()

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç-–ø–æ—Ç–æ–∫–∞
st.sidebar.markdown("---")
with st.sidebar.expander("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç"):
    new_flow_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:")
    new_flow_id = st.text_input(
        "ID —á–∞—Ç-–ø–æ—Ç–æ–∫–∞:",
        help="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∏–º–µ—Ä: 28d13206-3a4d-4ef8-80e6-50b671b5766c –∏–ª–∏ –∑–∞–∫–∂–∏—Ç–µ —Å–±–æ—Ä–∫—É —á–∞—Ç–∞ –≤ https://t.me/startintellect"
    )
    
    if st.button("–°–æ–∑–¥–∞—Ç—å") and new_flow_id:
        if save_chat_flow(st.session_state.username, new_flow_id, new_flow_name):
            st.session_state.current_chat_flow = {
                'id': new_flow_id,
                'name': new_flow_name or f"–ß–∞—Ç {len(chat_flows) + 1}"
            }
            st.success("–ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω!")
            st.rerun()

# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
if "new_chat_delete_confirm" not in st.session_state:
    st.session_state.new_chat_delete_confirm = False

# –ó–∞–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞
if st.sidebar.button(
    "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç" if not st.session_state.new_chat_delete_confirm else "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞",
    type="secondary" if not st.session_state.new_chat_delete_confirm else "primary",
    key="new_chat_delete_button"
):
    if st.session_state.new_chat_delete_confirm:
        if 'current_chat_flow' in st.session_state:
            if delete_chat_flow(st.session_state.username, st.session_state.current_chat_flow['id']):
                st.sidebar.success("–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
                if 'current_chat_flow' in st.session_state:
                    del st.session_state.current_chat_flow
                if 'message_hashes' in st.session_state:
                    del st.session_state.message_hashes
                st.session_state.new_chat_delete_confirm = False
                st.rerun()
    else:
        st.session_state.new_chat_delete_confirm = True
        st.sidebar.warning("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
if st.session_state.new_chat_delete_confirm:
    if st.sidebar.button("–û—Ç–º–µ–Ω–∞", key="new_chat_cancel_action"):
        st.session_state.new_chat_delete_confirm = False
        st.rerun()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç-–ø–æ—Ç–æ–∫–∞
if 'current_chat_flow' not in st.session_state:
    st.info("–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è")
    st.stop()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
if 'current_chat_flow' in st.session_state:
    chat_name = st.session_state.current_chat_flow['name']
    try:
        if not isinstance(chat_name, str):
            chat_name = str(chat_name)
        chat_name = chat_name.encode('utf-8').decode('utf-8')
    except:
        try:
            chat_name = chat_name.encode('cp1251').decode('utf-8')
        except:
            pass
    
    st.markdown(f"### üí¨ {chat_name}")
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏
    with st.expander("üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏", expanded=False):
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏

        available_sessions = get_available_sessions(
            st.session_state.username,
            st.session_state.current_chat_flow['id']
        )
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        if 'current_session' not in st.session_state.current_chat_flow:
            st.session_state.current_chat_flow['current_session'] = str(uuid.uuid4())
            save_session_history(
                st.session_state.username,
                st.session_state.current_chat_flow['id'],
                st.session_state.current_chat_flow['current_session'],
                [],
                get_session_display_name(st.session_state.username, st.session_state.current_chat_flow['id'], st.session_state.current_chat_flow['current_session'])
            )
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        col1, col2 = st.columns([3, 1])
        
        with col1:
            if available_sessions:
                # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –∏–º–µ–Ω –∫ ID
                session_map = {session['display_name']: session for session in available_sessions}
                display_names = list(session_map.keys())
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
                current_display_name = next(
                    (session['display_name'] for session in available_sessions 
                     if session['id'] == st.session_state.current_chat_flow['current_session']),
                    display_names[0] if display_names else None
                )
                
                selected_display_name = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é:",
                    display_names,
                    index=display_names.index(current_display_name) if current_display_name in display_names else 0
                )
                
                selected_session = session_map[selected_display_name]
                selected_session_id = selected_session['id']
                is_primary = selected_session.get('is_primary', False)
                
                # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π)
                if not is_primary:
                    new_name = st.text_input(
                        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Å–µ—Å—Å–∏–∏:",
                        value=selected_display_name,
                        key="new_session_name"
                    )
                else:
                    st.info("–û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞")
                
                if selected_session_id != st.session_state.current_chat_flow['current_session']:
                    st.session_state.current_chat_flow['current_session'] = selected_session_id
                    st.rerun()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —à–∏—Ä–∏–Ω–æ–π
        with col2:
            st.markdown(
                """
                <style>
                div[data-testid="column"] button {
                    width: 100%;
                    margin: 5px 0;
                    min-height: 45px;
                    padding: 0.5rem;
                }
                div.row-widget.stButton {
                    margin-bottom: 10px;
                }
                </style>
                """, 
                unsafe_allow_html=True
            )
            
            if st.button("üí´ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è", use_container_width=True):
                try:
                    new_session_id = str(uuid.uuid4())
                    current_flow_id = st.session_state.current_chat_flow['id']
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Å—Å–∏–π
                    existing_sessions = get_available_sessions(
                        st.session_state.username,
                        current_flow_id
                    )
                    new_session_number = len(existing_sessions) + 1
                    session_name = f"–°–µ—Å—Å–∏—è {datetime.now().strftime('%Y-%m-%d %H:%M')}"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ Redis
                    session_data = {
                        'messages': [],
                        'display_name': session_name,
                        'created_at': datetime.now().isoformat(),
                        'updated_at': datetime.now().isoformat()
                    }
                    
                    session_key = f"{st.session_state.username}_{current_flow_id}_{new_session_id}"
                    redis_client.set(
                        session_key,
                        json.dumps(session_data),
                        ex=86400  # TTL 24 —á–∞—Å–∞
                    )
                    
                    # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π
                    cache_key = f"available_sessions_{st.session_state.username}_{current_flow_id}_"
                    try:
                        redis_client.delete(cache_key)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    st.session_state.current_chat_flow['current_session'] = new_session_id
                    
                    st.success("–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")
                    time.sleep(1)
                    st.rerun()
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏: {e}")
                    print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            
            if available_sessions and not is_primary and st.button("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", use_container_width=True):
                if new_name and new_name.strip() != selected_display_name:
                    rename_session(
                        st.session_state.username,
                        st.session_state.current_chat_flow['id'],
                        selected_session_id,
                        new_name.strip()
                    )
            
            if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True):
                clear_session_history(
                    st.session_state.username,
                    st.session_state.current_chat_flow['id'],
                    st.session_state.current_chat_flow['current_session']
                )
            
            if not is_primary and st.button("üóë –£–¥–∞–ª–∏—Ç—å", type="primary", use_container_width=True):
                delete_session(
                    st.session_state.username,
                    st.session_state.current_chat_flow['id'],
                    st.session_state.current_chat_flow['current_session']
                )
        
    st.markdown("---")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    session_messages = load_session_history(
        st.session_state.username,
        st.session_state.current_chat_flow['id'],
        st.session_state.current_chat_flow['current_session']
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    if 'messages_page' not in st.session_state:
        st.session_state.messages_page = 0
    
    MESSAGES_PER_PAGE = 50
    total_messages = len(session_messages)
    total_pages = (total_messages + MESSAGES_PER_PAGE - 1) // MESSAGES_PER_PAGE
    
    if total_pages > 1:
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            page = st.select_slider(
                "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π",
                options=range(total_pages),
                value=st.session_state.messages_page,
                format_func=lambda x: f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {x + 1} –∏–∑ {total_pages}"
            )
            if page != st.session_state.messages_page:
                st.session_state.messages_page = page
                st.rerun()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = st.session_state.messages_page * MESSAGES_PER_PAGE
    end_idx = min(start_idx + MESSAGES_PER_PAGE, total_messages)
    page_messages = session_messages[start_idx:end_idx]
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for message in page_messages:
        display_message(message, message["role"])

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
def display_timer():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä"""
    placeholder = st.empty()
    for seconds in range(60):
        time_str = f"‚è±Ô∏è {seconds}—Å"
        placeholder.markdown(f"""
            <div style='animation: blink 1s infinite'>
                {time_str}
            </div>
            <style>
                div {{
                    font-size: 1.2em;
                    font-weight: bold;
                    color: #1E88E5;
                    padding: 10px;
                    border-radius: 8px;
                    background-color: #E3F2FD;
                    text-align: center;
                }}
                @keyframes blink {{
                    0%, 100% {{ opacity: 1.0 }}
                    50% {{ opacity: 0.5 }}
                }}
            </style>
        """, unsafe_allow_html=True)
        time.sleep(1)
        if not st.session_state.get('waiting_response', True):
            break
    placeholder.empty()

def generate_response(prompt: str, chat_id: str, session_id: str):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Flowise"""
    try:
        print('–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        prediction_data = PredictionData(
            chatflowId=chat_id,
            question=prompt,
            streaming=False,
            overrideConfig={
                "sessionId": f"{st.session_state.username}_{chat_id}_{session_id}",
                "modelName": "gpt-3.5-turbo"
            }
        )
        
        try:
            print("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API...")
            prediction = flowise_client.create_prediction(prediction_data)
            print("–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API...")
            response = next(prediction)
            print(f"–¢–∏–ø –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {type(response)}")
            print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {response}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            text_response = None
            if isinstance(response, dict):
                if response.get('text'):
                    print("–ù–∞–π–¥–µ–Ω –ø—Ä—è–º–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç")
                    text_response = response['text']
                elif 'agentReasoning' in response:
                    print("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–≥–µ–Ω—Ç–æ–≤")
                    agents = response['agentReasoning']
                    for agent in reversed(agents):
                        if agent.get('messages') and len(agent['messages']) > 0:
                            last_message = agent['messages'][-1]
                            if isinstance(last_message, dict):
                                content = last_message.get('content', '')
                                if content:
                                    print("–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞")
                                    text_response = content
                                    break
                            elif isinstance(last_message, str):
                                print("–ù–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞")
                                text_response = last_message
                                break
            else:
                text_response = str(response) if response else "–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API"

            if text_response:
                print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: {text_response[:100]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞
                    detected_lang = detect(text_response)
                    print(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞: {detected_lang}")
                    
                    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π
                    if detected_lang == 'en':
                        print("–ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π...")
                        translator = Translator()
                        translated = translator.translate(text_response, dest='ru')
                        if translated and translated.text:
                            print("–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                            return translated.text
                        else:
                            print("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–≤–æ–¥ –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                            return text_response
                    else:
                        print(f"–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Ç–µ–∫—Å—Ç —É–∂–µ –Ω–∞ —è–∑—ã–∫–µ: {detected_lang}")
                        return text_response
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}")
                    return text_response
            
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: {str(e)}")
            if "Unknown model" in str(e):
                return "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞."
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"
            
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ generate_response: {str(e)}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

def submit_message(user_input):
    if not user_input:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    try:
        print("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –∏ –∏—Å—Ç–æ—Ä–∏—é
        current_session_id = st.session_state.current_chat_flow['current_session']
        print(f"–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è: {current_session_id}")
        
        session_messages = load_session_history(
            st.session_state.username,
            st.session_state.current_chat_flow['id'],
            current_session_id
        )
        print("–ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = {"role": "user", "content": user_input}
        session_messages.append(user_message)
        
        try:
            save_session_history(
                st.session_state.username,
                st.session_state.current_chat_flow['id'],
                current_session_id,
                session_messages,
                get_session_display_name(st.session_state.username, st.session_state.current_chat_flow['id'], current_session_id)
            )
            print("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        except Exception as save_error:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(save_error)}")
        
        display_message(user_message, "user")

        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç
        with st.chat_message("assistant", avatar=assistant_avatar):
            print("–ó–∞–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç API...")
            response = generate_response(
                user_input,
                st.session_state.current_chat_flow['id'],
                current_session_id
            )
            print(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API: {response}")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç
            st.write(response)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏
            assistant_message = {"role": "assistant", "content": response}
            session_messages.append(assistant_message)
            
            try:
                save_session_history(
                    st.session_state.username,
                    st.session_state.current_chat_flow['id'],
                    current_session_id,
                    session_messages,
                    get_session_display_name(st.session_state.username, st.session_state.current_chat_flow['id'], current_session_id)
                )
                print("–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏")
            except Exception as save_error:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(save_error)}")
            
            try:
                update_remaining_generations(st.session_state.username, -1)
                print("–°—á–µ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω")
            except Exception as update_error:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞: {str(update_error)}")
            
            st.rerun()

    except Exception as e:
        error_msg = f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
        print(error_msg)
        st.error(error_msg)

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞
input_container = st.container()

def clear_input():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º callback –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    st.session_state.message_input = ""

# –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
user_input = st.text_area(
    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
    height=100,
    key="message_input",
    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∑–¥–µ—Å—å..."  
)

# –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
col1, col2, col3 = st.columns(3)
    
with col1:
    send_button = st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", key="send_message", use_container_width=True)
with col2:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º on_click –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    clear_button = st.button("–û—á–∏—Å—Ç–∏—Ç—å", key="clear_input", on_click=clear_input, use_container_width=True)
with col3:
    # –î–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ callback
    cancel_button = st.button("–û—Ç–º–µ–Ω–∏—Ç—å", key="cancel_request", on_click=clear_input, use_container_width=True)

# –ò–∑–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
if send_button:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    if user_input and user_input.strip():
        st.session_state['_last_input'] = user_input
        submit_message(user_input)